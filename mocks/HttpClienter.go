// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	http "github.com/PicPay/ms-chatpicpay-websocket-handler-api/pkg/http"
	mock "github.com/stretchr/testify/mock"
)

// HttpClienter is an autogenerated mock type for the HttpClienter type
type HttpClienter struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, clientConfig
func (_m *HttpClienter) Delete(ctx context.Context, clientConfig http.ClientConfig) (*http.HttpResponse, error) {
	ret := _m.Called(ctx, clientConfig)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *http.HttpResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, http.ClientConfig) (*http.HttpResponse, error)); ok {
		return rf(ctx, clientConfig)
	}
	if rf, ok := ret.Get(0).(func(context.Context, http.ClientConfig) *http.HttpResponse); ok {
		r0 = rf(ctx, clientConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.HttpResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, http.ClientConfig) error); ok {
		r1 = rf(ctx, clientConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, clientConfig
func (_m *HttpClienter) Get(ctx context.Context, clientConfig http.ClientConfig) (*http.HttpResponse, error) {
	ret := _m.Called(ctx, clientConfig)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *http.HttpResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, http.ClientConfig) (*http.HttpResponse, error)); ok {
		return rf(ctx, clientConfig)
	}
	if rf, ok := ret.Get(0).(func(context.Context, http.ClientConfig) *http.HttpResponse); ok {
		r0 = rf(ctx, clientConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.HttpResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, http.ClientConfig) error); ok {
		r1 = rf(ctx, clientConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Patch provides a mock function with given fields: ctx, clientConfig, payload
func (_m *HttpClienter) Patch(ctx context.Context, clientConfig http.ClientConfig, payload []byte) (*http.HttpResponse, error) {
	ret := _m.Called(ctx, clientConfig, payload)

	if len(ret) == 0 {
		panic("no return value specified for Patch")
	}

	var r0 *http.HttpResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, http.ClientConfig, []byte) (*http.HttpResponse, error)); ok {
		return rf(ctx, clientConfig, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, http.ClientConfig, []byte) *http.HttpResponse); ok {
		r0 = rf(ctx, clientConfig, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.HttpResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, http.ClientConfig, []byte) error); ok {
		r1 = rf(ctx, clientConfig, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Post provides a mock function with given fields: ctx, clientConfig, payload
func (_m *HttpClienter) Post(ctx context.Context, clientConfig http.ClientConfig, payload []byte) (*http.HttpResponse, error) {
	ret := _m.Called(ctx, clientConfig, payload)

	if len(ret) == 0 {
		panic("no return value specified for Post")
	}

	var r0 *http.HttpResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, http.ClientConfig, []byte) (*http.HttpResponse, error)); ok {
		return rf(ctx, clientConfig, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, http.ClientConfig, []byte) *http.HttpResponse); ok {
		r0 = rf(ctx, clientConfig, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.HttpResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, http.ClientConfig, []byte) error); ok {
		r1 = rf(ctx, clientConfig, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Put provides a mock function with given fields: ctx, clientConfig, payload
func (_m *HttpClienter) Put(ctx context.Context, clientConfig http.ClientConfig, payload []byte) (*http.HttpResponse, error) {
	ret := _m.Called(ctx, clientConfig, payload)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 *http.HttpResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, http.ClientConfig, []byte) (*http.HttpResponse, error)); ok {
		return rf(ctx, clientConfig, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, http.ClientConfig, []byte) *http.HttpResponse); ok {
		r0 = rf(ctx, clientConfig, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.HttpResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, http.ClientConfig, []byte) error); ok {
		r1 = rf(ctx, clientConfig, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewHttpClienter creates a new instance of HttpClienter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHttpClienter(t interface {
	mock.TestingT
	Cleanup(func())
}) *HttpClienter {
	mock := &HttpClienter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
