// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	logger "github.com/PicPay/lib-go-logger/v2"
	mock "github.com/stretchr/testify/mock"
)

// PublishServicer is an autogenerated mock type for the PublishServicer type
type PublishServicer struct {
	mock.Mock
}

// PublishEvent provides a mock function with given fields: ctx, message, log
func (_m *PublishServicer) PublishEvent(ctx context.Context, message interface{}, log *logger.Logger) error {
	ret := _m.Called(ctx, message, log)

	if len(ret) == 0 {
		panic("no return value specified for PublishEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, *logger.Logger) error); ok {
		r0 = rf(ctx, message, log)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPublishServicer creates a new instance of PublishServicer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPublishServicer(t interface {
	mock.TestingT
	Cleanup(func())
}) *PublishServicer {
	mock := &PublishServicer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
